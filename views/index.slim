doctype html
html
  head
    title Qiita contribution
    link media="all" rel="stylesheet" href="css/primer-css/css/primer.css"
    link media="all" rel="stylesheet" href="scss/style.css"
    script src="js/d3/d3.min.js"
    script src="js/jquery/dist/jquery.min.js"
    script src="js/moment/min/moment.min.js"

  body
    .container
      .columns
        .four-fifths.column.centered
          h1 Qiita post graph

          p.lead
            |Qiitaに投稿した数を、GitHub contributionグラフっぽく表示します。

          .columns
            .one-half.column.centered
              form action="" method=""
                input.input-large#qiita_id type="text" placeholder="Qiita ID"
                |&nbsp;
                button.btn.btn-primary#submit type="button" 取得

          h2
            span.qiita_id
              a href="http://qiita.com/zaru"
                |zaru
            |のQiita post graph

          #svg

    javascript:

      $('#submit').click(function() {
        var qiitaId = $('#qiita_id').val();

        $('.qiita_id').text(qiitaId);
        loadQiitaApi(qiitaId);
        console.log($('#qiita_id').val());
      });
      $(function() {
        loadQiitaApi('zaru');
      });

      var width = 960,
              height = 136,
              cellSize = 11,
              format = d3.time.format("%Y-%m-%d");

      var barPadding = 1;

      var prevDay = moment().subtract(1, 'years')["_d"];
      var startDay = new Date();
      var datasetDays = d3.time.days(prevDay, startDay);
      var dataSetMonths = d3.time.months(prevDay, startDay);

      var svg = d3.select("#svg")
              .append("svg")
              .attr("width", width)
              .attr("height", height);

      var rect = svg.selectAll("rect")
              .data(datasetDays)
              .enter()
              .append("rect")
              .attr("x", function (d, i) {
                var tmpI = i + startDay.getDay();
                var col = Math.floor(tmpI / 7);
                return col * cellSize + col * 2 + 15;
              })
              .attr("y", function (d, i) {
                var row = d.getDay();
                return row * cellSize + row * 2 + 15;
              })
              .attr("width", cellSize)
              .attr("height", cellSize)
              .attr("class", 'days')
              .on("mouseover", function(d, i) {
                var format = d3.time.format("%b %d, %Y");
                var x = parseInt(this.getAttribute('x'), 10) - 65;
                var y = parseInt(this.getAttribute('y'), 10) - 45;
                var tooltip = d3.select("#svg")
                        .append("div")
                        .attr("id", "tooltip")
                        .html("<strong>" + this.getAttribute('data-post') + " posts</strong> " + format(new Date(d)))
                        .attr("style", "top:" + y + "px;left:" + x + "px;");
              })
              .on("mouseout", function () {
                d3.select("#tooltip").remove();
              })
              .datum(format);

      rect.append("title")
              .text(function (d) {
                return d;
              });

      /*
      d3.csv("test.csv", function (error, csv) {
        console.log(csv);
        if (error) throw error;

        var data = d3.nest()
                .key(function (d) {
                  return d.Date;
                })
                .map(csv);

        rect.filter(function (d) {
          return d in data;
        })
                .attr("class", function (d) {
                  var point = data[d][0].Post * 1;
                  colorId = 0;
                  if (point > 3) {
                    colorId = 4;
                  } else if (point > 2) {
                    colorId = 3;
                  } else if (point > 1) {
                    colorId = 2;
                  } else if (point > 0) {
                    colorId = 1;
                  }
                  return "days level-" + colorId;
                })
                .attr('data-post', function(d) {
                  return data[d][0].Post;
                });
      });
      */


      function drawGraph(csv) {
        resetSvg();
        var data = d3.nest()
                .key(function (d) {
                  return d.Date;
                })
                .map(csv);

        rect.filter(function (d) {
          return d in data;
        })
                .attr("class", function (d) {
                  var point = data[d][0].Post * 1;
                  colorId = 0;
                  if (point > 3) {
                    colorId = 4;
                  } else if (point > 2) {
                    colorId = 3;
                  } else if (point > 1) {
                    colorId = 2;
                  } else if (point > 0) {
                    colorId = 1;
                  }
                  return "days level-" + colorId;
                })
                .attr('data-post', function (d) {
                  return data[d][0].Post;
                });
      }

      function loadQiitaApi (qiitaId) {
        $.ajax({
          url: "http://qiita.com/api/v2/users/" + qiitaId + "/items?per_page=100",
          type: "GET",
          dataType: "json",
          success: function (data) {
            var dailyData = [];
            data.forEach(function (val) {
              var date = new Date(val.created_at);
              var dateStr = date.getFullYear() + "-" + ('0' + (date.getMonth() + 1)).slice(-2) + "-" + ('0' + date.getDate()).slice(-2);
              var incrFlag = false;
              dailyData.forEach(function (data, i) {
                if (data['Date'] == dateStr) {
                  dailyData[i]['Post'] += 1;
                  incrFlag = true;
                }
              });
              if (incrFlag === false) {
                dailyData.push({
                  Date: dateStr,
                  Post: 1,
                  Stock: 0,
                });
              }
            });
            drawGraph(dailyData);
          },
          error: function (error) {
            console.log(error);
          }
        });
      }

      function resetSvg() {
        svg.selectAll("rect").classed("level-0 level-1 level-2 level-3 level-4", false).attr('data-post', 0);
      }

      svg.selectAll("text")
              .data(dataSetMonths)
              .enter()
              .append("text")
              .attr("x", function(d, i) {
                return (i + 1) * 52
              })
              .attr("y", 10)
              .attr("class", "day_label")
              .text(function(d) {
                var format = d3.time.format("%b");
                return format(d);
              })
              .datum(d3.time.format("%b"));

      svg.append("text")
              .attr("x", 5)
              .attr("y", 36)
              .attr("class", 'day_label')
              .text("M");
      svg.append("text")
              .attr("x", 5)
              .attr("y", 63)
              .attr("class", 'day_label')
              .text("W");
      svg.append("text")
              .attr("x", 5)
              .attr("y", 89)
              .attr("class", 'day_label')
              .text("F");